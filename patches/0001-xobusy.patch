From 050ff7ad827a3c2d3a8d92080ddbef358b6e6a46 Mon Sep 17 00:00:00 2001
From: MisileLaboratory <icecreamhappytroll@gmail.com>
Date: Tue, 10 Jan 2023 03:13:09 +0000
Subject: [PATCH] xobusy

---
 libraries/misilelib       |  2 +-
 projects/xobusy/README.md |  4 ++
 projects/xobusy/main.c    | 85 +++++++++++++++++++++++++++++++++++++++
 3 files changed, 90 insertions(+), 1 deletion(-)
 create mode 100644 projects/xobusy/README.md
 create mode 100644 projects/xobusy/main.c

diff --git a/libraries/misilelib b/libraries/misilelib
index 5c650d9..376676b 160000
--- a/libraries/misilelib
+++ b/libraries/misilelib
@@ -1 +1 @@
-Subproject commit 5c650d9e875883a4db3ac8cda332d763663a1882
+Subproject commit 376676ba75aca0d4a815c1bfe613e18d0fc15390
diff --git a/projects/xobusy/README.md b/projects/xobusy/README.md
new file mode 100644
index 0000000..e42db1e
--- /dev/null
+++ b/projects/xobusy/README.md
@@ -0,0 +1,4 @@
+
+# xobusy
+
+linux moment (just for school project)
diff --git a/projects/xobusy/main.c b/projects/xobusy/main.c
new file mode 100644
index 0000000..3199fee
--- /dev/null
+++ b/projects/xobusy/main.c
@@ -0,0 +1,85 @@
+#include <stdio.h>
+#include <string.h>
+#include <stdbool.h>
+#include <string.h>
+#include <dirent.h>
+#include <unistd.h>
+#define MAX_LEN 100
+
+bool compare_strs(char char1[], char char2[]) {
+    return strcmp(char1, char2) == 0;
+}
+
+void cat() {
+    char filename[MAX_LEN];
+    printf("파일 이름: ");
+    scanf("%s", filename);
+		printf("\n");
+    FILE* fs;
+    fs = fopen(filename, "r");
+    while (feof(fs) == 0) {
+        char str[MAX_LEN];
+        fgets(str, MAX_LEN, fs);
+        printf("%s", str);
+    }
+    fclose(fs);
+}
+
+void fls() {
+    DIR *d;
+    struct dirent *dir;
+    d = opendir(".");
+    if (d)
+    {
+        while ((dir = readdir(d)) != NULL)
+        {
+            printf("%s\n", dir->d_name);
+        }
+        closedir(d);
+    }
+}
+
+void cd() {
+    char dirname[MAX_LEN];
+    printf("디렉토리 이름: ");
+    scanf("%s", dirname);
+    chdir(dirname);
+}
+
+int main() {
+    bool a = true;
+    char* commands[] = {
+        "cat",
+        "exit",
+        "ls",
+        "cd",
+				"clear",
+				"cdir"
+    };
+
+    while (a) {
+        char buffer[MAX_LEN];
+        printf("> ");
+        scanf("%s", buffer);
+        if (compare_strs(buffer, commands[0])) {
+            cat();
+        } else if (compare_strs(buffer, commands[1])) {
+            return 0;
+        } else if (compare_strs(buffer, commands[2])) {
+            fls();
+        } else if (compare_strs(buffer, commands[3])) {
+            cd();
+        } else if (compare_strs(buffer, commands[4])) {
+            printf("\e[1;1H\e[2J");
+        } else if (compare_strs(buffer, commands[5])) {
+					char cwd[MAX_LEN];
+					if (getcwd(cwd, sizeof(cwd)) != NULL) {
+						 printf("현재 디렉토리: %s\n", cwd);
+				 	} else {
+						 printf("error\n");
+				 	}
+				} else {
+            printf("존재하지 않는 명령어입니다.\n");
+        }
+    }
+}
-- 
2.39.0

